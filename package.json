{
  "name": "continuum",
  "displayName": "Continuum",
  "license": "MIT",
  "version": "0.1.0",
  "publisher": "jamesnorton",
  "description": "Clojure debugger / REPL / language support for VS Code.",
  "author": {
    "name": "James Norton"
  },
  "engines": {
    "vscode": "^1.5.x"
  },
  "icon": "images/Clojure-icon.png",
  "categories": [
    "Debuggers"
  ],
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/indiejames/vscode-clojure-debug.git"
  },
  "bugs": {
    "url": "https://github.com/indiejames/vscode-clojure-debug/issues"
  },
  "dependencies": {
    "bencode": "^0.10.0",
    "chalk": "^1.1.1",
    "fs-extra": "^0.30.0",
    "jg-nrepl-client": "0.2.3",
    "jsedn": "0.3.5",
    "socket.io": "^1.4.8",
    "socket.io-client": "^1.4.8",
    "strip-json-comments": "^2.0.1",
    "tmp": "^0.0.28",
    "vscode": "^1.0.0",
    "vscode-debugadapter": "^1.13.0",
    "vscode-debugprotocol": "^1.13.0",
    "vscode-languageclient": "^1.4.2",
    "vscode-languageserver": "^1.4.1"
  },
  "devDependencies": {
    "mocha": "^2.4.5",
    "typescript": "^2.0.2",
    "typings": "^0.7.9"
  },
  "scripts": {
    "prepublish": "node ./node_modules/typescript/bin/tsc -p ./src",
    "compile": "node ./node_modules/typescript/bin/tsc -p ./src",
    "watch": "node ./node_modules/typescript/bin/tsc -w -p ./src",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/mocha/bin/mocha -u tdd ./out/tests/"
  },
  "activationEvents": [
	  "workspaceContains:project.clj",
    "onLanguage:clojure"
  ],
  "main": "./out/extension",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Clojure configuration",
      "properties": {
        "clojure.languageServerExample.maxNumberOfProblems": {
          "type": "number",
          "default": 100,
          "description": "Controls the maximum number of problems produced by the server."
        },
        "clojure.refreshNamespacesBeforeRunnningAllTests": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not to issue a refresh command before running all the tests in the workspace."
        },
        "clojure.refreshNamespacesBeforeRunnningTestNamespace": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not to issue a refresh command before running all the tests in a namespace."
        },
        "clojure.refreshNamespacesBeforeRunnningTest": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not to issue a refresh command before running a single test."
        }
      }
    },
    "commands": [
      {
        "command": "clojure.new_library_project",
        "title": "Clojure: Create new library project",
        "description": "Create a new leiningen based library project."
      },
      {
        "command": "clojure.new_appliction_project",
        "title": "Clojure: Create new application project",
        "description": "Create a new leiningen based application project."
      },
      {
        "command": "clojure.eval",
        "title": "Clojure: Evaluate selected text",
        "description": "Evaluate the selected text in the file's namespace."
      },
      {
        "command": "clojure.expand_selection",
        "title": "Clojure: Expand Selection",
        "description": "Expand selection to containing brackets/parentheses."
      },
      {
        "command": "clojure.refresh",
        "title": "Clojure: Refresh Code",
        "description": "Refresh code without restarting the REPL."
      },
      {
        "command": "clojure.run-all-tests",
        "title": "Clojure: Run All Tests",
        "description": "Run all the tests in the project after refreshing the code."
      },
      {
        "command": "clojure.run-test-file",
        "title": "Clojure: Run Tests in Current Namespace",
        "description": "Run the tests in the current namespace, optionally refreshing code first."
      },
      {
        "command": "clojure.run-test",
        "title": "Clojure: Run Test Under Cursor",
        "description": "Run the test under the cursor, optionally refreshing code first."
      }
    ],
    "keybindings": [
      {
        "command": "clojure.eval",
        "key": "ctrl+alt+e",
        "mac": "cmd+alt+e",
        "when": "editorTextFocus"
      },
      {
        "command": "clojure.expand_selection",
        "key": "ctrl+shift+m",
        "when": "editorTextFocus"
      }
    ],
    "debuggers": [
      {
        "type": "clojure",
        "label": "Clojure Debug",
        "enableBreakpointsFor": {
          "languageIds": [
            "clojure"
          ]
        },
        "program": "./out/clojureDebug.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "toolsJar",
              "command",
              "cwd"
            ],
            "properties": {
              "toolsJar": {
                "type": "string",
                "description": "Path to the tools.jar in your Java installation.",
                "default": "${JAVA_HOME}/lib/tools.jar"
              },
              "commandLine": {
                "type": "array",
                "description": "Command to run to launch the debugged program.",
                "default": ["lein", "repl", ":start", "5555"]
              },
              "program": {
                "type": "string",
                "description": "Command to run to launch the debugged program.",
                "default": "lein repl :start 5555"
              },
              "console": {
                "enum": [ "internalConsole", "integratedTerminal", "externalTerminal" ],
								"description": "Console to to use for launched programs. Defaults to internal debug console.",
								"default": "internalConsole"
              },
              "leinPath": {
                "type": "string",
                "description": "Path the the lein executable.",
                "default": "/usr/local/bin/lein"
              },
              "replPort": {
                "type": "number",
                "description": "Port on which the debugged nREPL should listen.",
                "default": 5555
              },
              "debugReplPort": {
                "type": "number",
                "description": "Port on which the client/debugger nREPL should listen.",
                "default": 5556
              },
              "debugPort": {
                "type": "number",
                "description": "JDI port on which the debugger should connect to the process to be debugged.",
                "default": 8030
              },
              "sideChannelPort": {
                "type": "number",
                "description": "Port on which the debugger should talk to the extension.",
                "default": 3030
              },
              "env": {
                "type": "object",
                "description": "Environment variables passed to the program.",
                "default": {}
              },
              "cwd": {
                "type": "string",
                "description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
                "default": "${workspaceRoot}"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stops program on launch.",
                "default": false
              },
              "refreshOnLaunch": {
                "type": "boolean",
                "description": "Automatically loads all namespaces on launch.",
                "default": true
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "commandLine": ["lein", "repl", ":start", "5555"],
            "name": "Clojure-Debug",
            "type": "clojure",
            "request": "launch",
            "toolsJar": "${JAVA_HOME}/lib/tools.jar",
            "env": {},
            "cwd": "${workspaceRoot}",
            "stopOnEntry": false,
            "refreshNamespacesOnLaunch": true
          }
        ]
      }
    ]
  }
}
